@using SpotifyServices;
@using BlazorApp1.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IConfiguration _Configuration
@inject IJSRuntime JSRuntime
@inject ProtectedSessionStorage ProtectedSessionStore


@page "/auth/spotifycallback"
@* @rendermode InteractiveServer *@

<h3>SpotifyCallback</h3>

@code {

    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        string spotifyAuthUrl = "https://localhost:7262/search";
        //if (firstRender && !isInitialized)
        //{
            isInitialized = true;

            // Simulate receiving the token from URL parameters (Modify this based on your OAuth implementation)
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            string code = query["code"] ?? string.Empty;
            SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_Configuration, ProtectedSessionStore);

            await spotifyAppServices.ExchangeCodeForToken(code);
        //}
        NavigationManager.NavigateTo(spotifyAuthUrl, true);
    }

    // public async Task<string> ExchangeCodeForToken(string code)
    // {

    //     var requestContent = new FormUrlEncodedContent(new[]
    //     {
    //         new KeyValuePair<string, string>("grant_type", "authorization_code"),
    //         new KeyValuePair<string, string>("code", code),
    //         new KeyValuePair<string, string>("redirect_uri", "https://localhost:7262/auth/spotifycallback"),
    //         new KeyValuePair<string, string>("client_id", "6c920f46f61c4d6f8274777f892531b7"),
    //         new KeyValuePair<string, string>("client_secret", "ee31b038d78f480fbee19414e0bb1575"),
    //     });

    //     var response = await Http.PostAsync("https://accounts.spotify.com/api/token", requestContent);
    //     var responseContent = await response.Content.ReadFromJsonAsync<SpotifyTokenResponse>();
    //     string token = null;
    //     if (responseContent != null)
    //     {
    //         token = responseContent.access_token;

    //         //await Task.Delay(500);
    //         //await JSRuntime.InvokeVoidAsync("console.log", "Storing token:", responseContent.access_token);
    //         //await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "spotify_token", responseContent.access_token);
    //         // Store the token securely (e.g., local storage or session)
    //         //*/*/*/*/*/*/Navigation.NavigateTo("/");*/*/*/*/*/*/
    //         //NavigationManager.NavigateTo("/search");
    //     }
    //     return token;
    //     // else
    //     //{
    //       //  NavigationManager.NavigateTo("/");
    //     //}
    // }

}

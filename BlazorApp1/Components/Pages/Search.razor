@using OpenAI.Chat
@inject NavigationManager NavigationManager
@inject HttpClient Http;

@page "/search"
@rendermode InteractiveServer

@* <head>
    <meta charset="utf-8" />
    <title>Spotify App</title>
    <script src="~/bootstrap/spotify.js" type="module"></script>
</head> *@

<PageTitle>Search</PageTitle>

<h1>Search</h1>

@* <input style="width:400px" placeholder="Search..." id="" /> *@

<input @bind="PromptText" placeholder="Enter text here" style="width:400px" />
<button @onclick="SubmitPrompt">Submit</button>

@* <button onclick="testFunction()">JS link. CLICK ME!!!</button> *@
<button @onclick="AuthorizeSpotify">JS link. CLICK ME!!!</button>
<button @onclick="GetProfile">Get Profile</button>

<p>You entered: @ResponseText</p>
@code {
    // private string InputText { get; set; } = "";
    // private string SubmittedText { get; set; } = "";

    // private void SubmitText()
    // {
    //     SubmittedText = InputText;
    //     Console.WriteLine("SubmittedText: " + SubmittedText);
    // }

    private string PromptText { get; set; } = "";
    private string ResponseText { get; set; } = "";

    private void SubmitPrompt()
    {
        ChatClient client = new(model: "gpt-4o-mini", apiKey: "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");

        ChatCompletion completion = client.CompleteChat(PromptText);

        ResponseText = completion.Content[0].Text;

    }

    @code {
        private void AuthorizeSpotify()
        {
            var clientId = "6c920f46f61c4d6f8274777f892531b7";
            var redirectUri = "https://localhost:7262/search";
            var scopes = "user-read-private user-read-email";

            var url = $"https://accounts.spotify.com/authorize?client_id={clientId}&response_type=code&redirect_uri={Uri.EscapeDataString(redirectUri)}&scope={Uri.EscapeDataString(scopes)}";
            // NavigateTo(url, true);
            // Navigation.NavigateTo(url, true);
            
            NavigationManager.NavigateTo(url, true);
        }

        // private async Task GetProfile() {

        //     var response = await Http.GetFromJsonAsync("https://api.example.com/user/profile");

        //     string token = "AQBWi41JYHqDgxrChIMjbSbJjFKRqkI4zI_UJUNeufXV0TL3qOdaUUHYGYoPnZmsRGM5aaC9zdaxMd_KbnrZbp4DfPmFc9JfwxMQI278kwEkFJ8nSbz9Hbqo1uCzJfxam8QHZUEATfsrzYNcNMdvhlE_ERLXMzm3ClgLJ2zpicY3g9aBek8rz_MuyPulZVV4Az-uI_n5fyRSbtWxjs-ZdYwEnbSZ";
        //     var response = await Http.PostAsync("https://accounts.spotify.com/api/token", requestBody);
        //     var content = await response.Content.ReadAsStringAsync();

        // }

        private async Task GetProfile()
        {

            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            string code = query["code"] ?? string.Empty;

            var token = await ExchangeCodeForToken(code);
            // if (!string.IsNullOrEmpty(token))
            // {
            //     await FetchUserProfile(token);
            // }

            Console.WriteLine("accessToken: " + token);
            //string accessToken = "AQDmEb32lhqgscjGEmEBrPg52-OI-jojZ8uEFlhBN7_lg7fvuSDgqdB3aIxOpPSSVqcoWAcN3bFi1tBmDYjNHEONIz8VZE59wXZEo_d67O8LRJ-t_-vnZv84mm9FYLEZ-vNacQeZ1-YMFJAbvUZrHepE_iYcc8HAAcEUP4b5Wr1ROJo5daq_crYVxBsu8nyi8gpAPn6CKhLxfPw1ADPxYVsFihQ4";
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.GetAsync("https://api.spotify.com/v1/me");
            var content = await response.Content.ReadAsStringAsync();

            var profile = System.Text.Json.JsonDocument.Parse(content).RootElement;

            var displayName = profile.GetProperty("display_name").GetString();
            var email = profile.GetProperty("email").GetString();
            var spotifyId = profile.GetProperty("id").GetString();
            //var profileImageUrl = profile.GetProperty("images").EnumerateArray().FirstOrDefault().GetProperty("url").GetString();

            Console.WriteLine($"Name: {displayName}, Email: {email}, ID: {spotifyId}");
        }

        private async Task<string?> ExchangeCodeForToken(string code)
        {
            var clientId = "6c920f46f61c4d6f8274777f892531b7";
            var clientSecret = "ee31b038d78f480fbee19414e0bb1575";
            var redirectUri = "https://localhost:7262/search";

            var requestBody = new FormUrlEncodedContent(new[]
            {
            new KeyValuePair<string, string>("grant_type", "authorization_code"),
            new KeyValuePair<string, string>("code", code),
            new KeyValuePair<string, string>("redirect_uri", redirectUri),
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("client_secret", clientSecret)
        });

            var response = await Http.PostAsync("https://accounts.spotify.com/api/token", requestBody);
            var content = await response.Content.ReadAsStringAsync();

            Console.WriteLine(content);

            var tokenObj = System.Text.Json.JsonDocument.Parse(content).RootElement;
            return tokenObj.TryGetProperty("access_token", out var token) ? token.GetString() : null;
        }
    }
}

@using OpenAI.Chat
@using OpenAIServices;
@using SpotifyServices;
@using BlazorApp1.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http;
@inject IConfiguration _Configuration
@inject IJSRuntime JSRuntime
@inject ProtectedSessionStorage ProtectedSessionStore

@page "/search"
@rendermode InteractiveServer

@* <head>
    <meta charset="utf-8" />
    <title>Spotify App</title>
    <script src="~/bootstrap/spotify.js" type="module"></script>
</head> *@

<PageTitle>Search</PageTitle>

<h1>Search</h1>

@* <input style="width:400px" placeholder="Search..." id="" /> *@

<input @bind="PromptText" placeholder="Enter text here" style="width:400px" />
<button @onclick="SubmitPrompt">Submit</button>

@* <button onclick="testFunction()">JS link. CLICK ME!!!</button> *@
<button @onclick="AuthorizeSpotify">Spotify sign in</button>
<button @onclick="GetAccessToken">Get access token</button>
<button @onclick="GetProfile">Get profile</button>
<button @onclick="AuthorizeSignOut">Spotify sign out</button>

<p>You entered: @ResponseText</p>
@code {
    // private string InputText { get; set; } = "";
    // private string SubmittedText { get; set; } = "";

    // private void SubmitText()
    // {
    //     SubmittedText = InputText;
    //     Console.WriteLine("SubmittedText: " + SubmittedText);
    // }

    private string PromptText { get; set; } = "";
    private string ResponseText { get; set; } = "";


    private void SubmitPrompt()
    {
        OpenAIServices openAIServices = new OpenAIServices();

        ChatClient chatClientService = openAIServices.OpenAIClientService(_Configuration);

        ChatCompletion completion = chatClientService.CompleteChat(PromptText);

        ResponseText = completion.Content[0].Text;
    }

    private void AuthorizeSpotify()
    {
        SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_Configuration, ProtectedSessionStore);

        string spotifyAuthUrl = spotifyAppServices.SpotifySignInAuth();

        NavigationManager.NavigateTo(spotifyAuthUrl, true);
    }

    private async Task AuthorizeSignOut()
    {
        string signoutUrl = "https://accounts.spotify.com/logout/";
        await JSRuntime.InvokeVoidAsync("open", signoutUrl, "_blank");
        await RemoveToken();
    }

    private async Task GetAccessToken()
    {

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string code = query["code"] ?? string.Empty;
        SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_Configuration, ProtectedSessionStore);

        await spotifyAppServices.ExchangeCodeForToken(code);
        await spotifyAppServices.GetTokenAsync();
    }

    private async Task GetProfile()
    {
        SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_Configuration, ProtectedSessionStore);
        string token = await spotifyAppServices.GetTokenAsync();
        //string token = await GetAccessToken();
        Console.WriteLine("GetAccessToken: " + token);

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync("https://api.spotify.com/v1/me");
        var content = await response.Content.ReadAsStringAsync();

        var profile = System.Text.Json.JsonDocument.Parse(content).RootElement;

        var displayName = profile.GetProperty("display_name").GetString();
        //var email = profile.GetProperty("email").GetString();
        var spotifyId = profile.GetProperty("id").GetString();
        //var profileImageUrl = profile.GetProperty("images").EnumerateArray().FirstOrDefault().GetProperty("url").GetString();

        Console.WriteLine($"Name: {displayName}, ID: {spotifyId}");
        //, Email: {email}, ID: {spotifyId}");
    }

    private async Task<string> GetToken()
    {
        return await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "spotify_token");
    }

    private async Task RemoveToken()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "spotify_token");
    }

}

@using OpenAI.Chat
@using OpenAIServices;
@using SpotifyServices;
@using BlazorApp1.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http;
@inject IConfiguration _Configuration
@inject IJSRuntime JSRuntime
@inject ProtectedSessionStorage ProtectedSessionStore

@page "/search"
@rendermode InteractiveServer

<PageTitle>Search</PageTitle>

<div class="w3-bar">
    <h1 class="w3-bar-item">Search</h1>
    <button class="w3-bar-item w3-right" @onclick="AuthorizeSignOut">Spotify sign out</button>
</div>
<input @bind="PromptText" placeholder="Enter text here" style="width:400px" />

<button @onclick="SubmitPrompt">Submit</button>
<button @onclick="GetProfile">Get profile</button>

<p>You entered: @ResponseText</p>

@* <script type="text/javascript">
</script> *@

@code {
    private string PromptText { get; set; } = "";
    private string ResponseText { get; set; } = "";
    private string? AuthAccessToken = null;
    private string SpotifyCode = string.Empty;
    private string SpotifyAccessToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string result = GetSpotifyCode();
            
            if (!string.IsNullOrEmpty(result))
            {
                SpotifyCode = result;
            }
            else
            {
                AuthorizeSpotify();
            }
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine("OnInitializedAsync navEx: " + navEx.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("OnInitializedAsync Ex: " + ex.Message);
        }
    }

    private string GetSpotifyCode()
    {
        string? spotifyCode = null;
        try 
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            spotifyCode = query["code"] ?? null;
            Console.WriteLine("GetSpotifyCode spotifyCode: " + spotifyCode);
        }
        catch (Exception ex)
        {
            Console.WriteLine("GetSpotifyCode Ex: " + ex.Message);
        }

        return spotifyCode;
    }

    private void SubmitPrompt()
    {
        try
        {
            OpenAIServices openAIServices = new OpenAIServices();

            ChatClient chatClientService = openAIServices.OpenAIClientService(_Configuration);

            ChatCompletion completion = chatClientService.CompleteChat(PromptText);

            ResponseText = completion.Content[0].Text;
        }
        catch (Exception ex)
        {
            Console.WriteLine("SubmitPrompt Ex: " + ex.Message);
        }
    }

    private void AuthorizeSpotify()
    {
        string? spotifyAuthUrl = null;

        try
        {
            SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_Configuration, ProtectedSessionStore);

            spotifyAuthUrl = spotifyAppServices.SpotifySignInAuth();
        }
        catch (Exception ex)
        {
            Console.WriteLine("AuthorizeSpotify Ex: " + ex.Message);
        }

        if (!string.IsNullOrEmpty(spotifyAuthUrl))
        {
            NavigationManager.NavigateTo(spotifyAuthUrl, true);
        }
        else
        {
            Console.WriteLine("AuthorizeSpotify: spotifyAuthUrl is null");
        }
    }

    private async Task AuthorizeSignOut()
    {
        string signoutUrl = "https://accounts.spotify.com/logout/";
        //Open new tab to signout
        await JSRuntime.InvokeVoidAsync("open", signoutUrl, "_blank");
        await RemoveToken();
        //Call JS function
        await JSRuntime.InvokeVoidAsync("navigate", "");
        
    }

    private async Task GetAccessToken()
    {
        SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_Configuration, ProtectedSessionStore);

        try
        {
            if (!string.IsNullOrEmpty(SpotifyAccessToken))
            {
                Console.WriteLine("GetAccessToken SpotifyCode: " + SpotifyCode);
                return;
            }

            if (!string.IsNullOrEmpty(SpotifyCode))
            {
                SpotifyAccessToken = await spotifyAppServices.ExchangeCodeForToken(SpotifyCode);
                Console.WriteLine("GetAccessToken SpotifyAccessToken: " + SpotifyAccessToken);
            }
            else
            {
                Console.WriteLine("GetAccessToken: SpotifyCode is null or Empty!");
            }
        }
        catch (Exception ex) 
        {
            Console.WriteLine("GetAccessToken Ex: " + ex.Message);
        }
    }

    private async Task GetProfile()
    {
        try
        {
            if (string.IsNullOrEmpty(SpotifyAccessToken))
            {
                await GetAccessToken();
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", SpotifyAccessToken);
            var response = await Http.GetAsync("https://api.spotify.com/v1/me");
            var content = await response.Content.ReadAsStringAsync();

            var profile = System.Text.Json.JsonDocument.Parse(content).RootElement;

            var displayName = profile.GetProperty("display_name").GetString();
            var spotifyId = profile.GetProperty("id").GetString();

            Console.WriteLine($"Name: {displayName}, ID: {spotifyId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("GetProfile Ex: " + ex.Message);
        }
    }

    private async Task RemoveToken()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "spotify_token");
        }
        catch (Exception ex)
        {
            Console.WriteLine("RemoveToken Ex: " + ex.Message);
        }
    }
}

@using OpenAI.Chat;
@using OpenAI.Assistants
@using OpenAIServices;
@using SpotifyServices;
@using BlazorApp1.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json;
@using System.Text;
@using System.Text.Json;
@using Newtonsoft.Json.Linq;
@using System.Text.RegularExpressions;

@inject NavigationManager _navigationManager
@inject IConfiguration _config
@inject IJSRuntime _jsRuntime
@inject SpotifyServices_TokenService _tokenService

@page "/playlists"
@rendermode InteractiveServer

<PageTitle>Playlists</PageTitle>

<div>
    <button class="font-sans text-lg font-bold rounded-md text-gray-600 border-2 border-orange-300 w-28 h-12 hover:bg-orange-300 hover:rounded-3xl hover:text-white transition duration-500" style=" float: right !important" @onclick="AuthorizeSignOut">Sign out</button>
    @if (SpotifyAuthUser != null)
    {
        <p class="font-mono text-2xl font-medium text-gray-600" id="user_id" style="float: right !important;margin:8px">@SpotifyAuthUser.DisplayName</p>
    }
</div>
<div class="flex flex-wrap justify-center items-center" style="margin-top:60px">
    <button class="font-sans font-bold rounded-full text-white border-2 border-orange-300 w-20 h-8 bg-orange-300 rounded-3xl transition duration-500" id="btn_UserPlaylists" onclick="spotifyShowPlaylists(true)" style="margin-right:8px">Playlists</button>
    <button class="font-sans font-bold rounded-full text-gray-600 border-2 border-orange-300 w-20 h-8 hover:bg-orange-300 rounded-3xl hover:text-white transition duration-500" id="btn_OpenCreatePlaylist" onclick="spotifyShowPlaylists(false)" style="">Create</button>
</div>
<div>
    <div class="flex flex-wrap justify-center items-center" style="margin-top:64px" id="circleLoader">
        <svg class="animate-spin h-32 w-32 text-blue-500" fill="none" viewBox="0 0 24 24">
            <circle class="text-orange-300 opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <circle class="text-orange-300" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-dasharray="80" stroke-dashoffset="60"></circle>
        </svg>
    </div>
    <div class="flex flex-wrap justify-center items-center" id="spotifyPlaylistsDisplay" style="padding-top:16px;width:100%">
    @if (SpotifyListPlaylists != null)
    {
        foreach (SpotifyPlaylist playlist in SpotifyListPlaylists)
        {
            <div class="box transform flex flex-col items-center rounded-xl bg-gray-100 shadow-lg duration-150 hover:scale-110 hover:shadow-xl/20 text-center hover:border-2 hover:border-orange-300" @onclick="() => OpenPlaylist(playlist.Id, playlist.Name)" style="width:180px;padding-top:10px;margin:8px;cursor:pointer">
            @if (playlist.Images != null && playlist.Images.Count > 0)
            {
                <img class="rounded" style="width:160px;height:160px" src="@playlist.Images[0].Url" />
            }
                <h5 class="text-center" style="max-width:170px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis">
                    <b>@playlist.Name</b>
                </h5>
            </div>
        }
        <script type="text/javascript">
            document.getElementById("circleLoader").style.display = "none";
        </script>
    }
    </div>
    
    <div id="spotifyPlaylistDisplay" style="display:none">
        <div class="flex flex-wrap justify-center items-center" style="margin-top:64px" id="circleLoader_Playlist">
            <svg class="animate-spin h-32 w-32 text-blue-500" fill="none" viewBox="0 0 24 24">
                <circle class="text-orange-300 opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <circle class="text-orange-300" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-dasharray="80" stroke-dashoffset="60"></circle>
            </svg>
        </div>
        <div class="border-3 border-solid border-orange-300 box rounded-xl bg-zinc-300" id="playlist_Tracks" style="width:45vw;height:80vh;margin-top:30px;float:left;overflow-y:scroll">
            <ol>
            @if (SpotifySelectedPlaylist != null)
            {
                foreach(TrackItem track in SpotifySelectedPlaylist.Tracks.Items)
                {
                    @if (track.Track != null)
                    {
                            <li style="list-style-type:none;border-bottom:2px solid rgba(0, 0, 0, 0.1)">
                        <div class="w3-bar">
                            <div class="w3-bar-item w3-bar-item">
                                <h5 style="width:42vw;white-space:nowrap;overflow:hidden;text-overflow:ellipsis"><b>@track.Track.Name</b></h5>
                                <h5 style="width:42vw;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;float:left;margin-top:0px">@track.Track.Artists[0].Name</h5>
                                <br />
                                <h6 style="height:24px;width:42vw;white-space:nowrap;overflow:hidden;text-overflow:ellipsis">@track.Track.Album.Name</h6>
                            </div>
                        </div>
                        </li>
                    }
                }
            }
            </ol>
        </div>
        <div id="playlist_Info" style="width:45vw;float:right;padding-left:6.25vw">
        @if (SpotifySelectedPlaylist != null)
        {
            <div style="width:30vw;margin-bottom">
                    <h2 class="text-center" style="float:left;width:22vw;height:44px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis">
                    <b>@SpotifySelectedPlaylist.Name</b>
                </h2>
                    <button class="font-sans text-lg font-bold rounded-3xl text-gray-600 border-2 border-orange-300 w-12 h-12 hover:bg-orange-300 hover:rounded-3xl hover:w-28 hover:text-white transition-w-28 duration-300" style="float:right;margin-top:4px" onmouseover="testChangeInner(this, true)" onmouseout="testChangeInner(this, false)" onclick=" window.open('@SpotifySelectedPlaylist.External_Urls.Spotify','_blank')">
                        &rarr;
                    </button>
            </div>
            <div style="width:30vw">
                <img class="rounded-3xl" src="@SpotifySelectedPlaylist.Images[0].Url" />
            </div>
        

            <div class="box rounded-xl bg-zinc-300" style="width:30vw;padding:8px; margin-top:8px;margin-bottom:8px">
                <table class="font-mono text-gray-950">
                    <tr>
                        <td class="font-semibold" style="text-align:right">Name:</td>
                        <td id="infoName">@SpotifySelectedPlaylist.Name</td>
                    </tr>
                    @if (SpotifySelectedPlaylist.Description != null) {
                        <tr>
                            <td class="font-semibold" id="playlistDescription" style="text-align:right">Description:</td>
                            <td id="infoDescription">@SpotifySelectedPlaylist.Description</td>
                        </tr>
                    }
                    <tr>
                        <td class="font-semibold" style="text-align:right">No of tracks:</td>
                        <td id="infoTrackLength">@SpotifySelectedPlaylist.Tracks.Items.Count</td>
                    </tr>
                    <tr>
                        <td class="font-semibold" style="text-align:right">Duration:</td>
                        <td id="infoDuration">@SpotifySelectedPlaylist.PlaylistDuration</td>
                    </tr>
                </table>
            </div>
        }
        </div>
    </div>

    <div id="aiPrompts" style="display:none; text-align:center;padding-top: 16px">
        <h1 class="w3-bar-item">Create a vibe</h1>
        <textarea type="text" id="pillInput" class="input rounded-xl border-2 border-solid border-orange-300" onkeyup="updateTextArea(this)" placeholder="What are you feeling?" style="transition: height 0.2s ease ;width: 45vw; resize:none;overflow:hidden;box-sizing:border-box;line-height:1.4;padding:4px;inherit; min-height: 36px;"></textarea>
        <input id="input_Prompt" @bind="PromptText" placeholder="What are you feeling?" style="width:400px" />
        <input id="input_PlaylistName" @bind="PlaylistNameText" placeholder="Enter name..." style="width:400px;display:none" />

        <button id="btn_SubmitPrompt" @onclick="SubmitPrompt">Submit</button>
        <button id="btn_SelectAll" onclick="spotifySelectAll()" style="display:none">Select All</button>
        <button id="btn_CreatePlaylist" @onclick="CreatePlaylist" style="display:none">Create Playlist</button>
    </div>
    <div class="w3-center" id="display_Loading" style="display:none">
        <h1>Loading...</h1>
    </div>
    <div class="w3-center" id="display_CreatingPlaylist" style="display:none">
        <h1>Creating Playlist...</h1>
    </div>
    <br />
    <div id="ai_GeneratedPlaylist" style="display:none">
        <br />
        <h3 id="ai_PlaylistDescription"></h3>
        <br />
        <ol id="ai_ListPlaylistTracks"></ol>
    </div>
</div>
<script type="text/javascript">
    // document.addEventListener("load", (e) => {
    //     document.getElementById("div_Sidebar").style.display = "none";
    // })
</script>

@code {
    public bool bFoundUser = false;

    public SpotifyAuthUser? SpotifyAuthUser { get; set; } = null;
    public List<SpotifyPlaylist>? SpotifyListPlaylists { get; set; } = null;
    public SpotifyPlaylist? SpotifySelectedPlaylist { get; set; } = null;

    private string PromptText { get; set; } = string.Empty;
    private string PlaylistNameText { get; set; } = string.Empty;

    //Prevent loops on render
    private bool _hasInitialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_config, _jsRuntime, _tokenService);

        if (firstRender && !_hasInitialized)
        {
            _hasInitialized = true;
            SpotifyAuthUserData spotifyAuthUserData = await spotifyAppServices.InitSpotifyFlow();

            SpotifyAuthUser = spotifyAuthUserData.SpotifyAuthUser;
            SpotifyListPlaylists = spotifyAuthUserData.ListSpotifyPlaylists;
            bFoundUser = true;
            StateHasChanged();
        }
    }
    private async Task AuthorizeSignOut()
    {
        //Console.WriteLine(_tokenService.AccessToken);
        string signoutUrl = "https://accounts.spotify.com/logout/";
        //Open new tab to signout
        await RemoveToken();
        //Console.WriteLine(_tokenService.AccessToken);
        await _jsRuntime.InvokeVoidAsync("open", signoutUrl, "_blank");

        //Call JS function
        await _jsRuntime.InvokeVoidAsync("navigate", "");

    }
    private async Task RemoveToken()
    {
        try
        {
            await _tokenService.ClearTokens();
        }
        catch (Exception ex)
        {
            Console.WriteLine("RemoveToken Ex: " + ex.Message);
        }
    }
    private async void OpenPlaylist(string id, string playlistName) 
    {
        SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_config, _jsRuntime, _tokenService);

        try
        {
            Console.WriteLine("OpenPlaylist id: " + id);
            //await _jsRuntime.InvokeVoidAsync("spotifyOpenPlaylist", playlistName);
            await _jsRuntime.InvokeVoidAsync("spotifyLodaingPlaylist", true);
            SpotifySelectedPlaylist = await spotifyAppServices.SpotifyGetPlaylist(id);
            SpotifySelectedPlaylist.Name = playlistName;
            StateHasChanged();
            await _jsRuntime.InvokeVoidAsync("spotifyLodaingPlaylist", false);
        }
        catch (Exception ex)
        {
            Console.WriteLine("OpenPlaylist ex: " + ex.Message);
        }
    }
    private async void SubmitPrompt()
    {
        try
        {
            _jsRuntime.InvokeVoidAsync("spotifyShowLoading");

            OpenAIServices openAIServices = new OpenAIServices(_config);

            OpenAIPlaylist? result = await openAIServices.OpenAISubmitQuery(PromptText);

            if (result == null)
            {
                Console.WriteLine("SubmitPrompt: result is null or empty");
                return;
            }

            // Search for tracks in Spotify
            SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_config, _jsRuntime, _tokenService);

            result.Playlist = await spotifyAppServices.SpotifyGetTrackIDs(result.Playlist);
            string playlistResult = JsonConvert.SerializeObject(result);

            await _jsRuntime.InvokeVoidAsync("spotifyProcessChatResponse", playlistResult);
        }
        catch (Exception ex)
        {
            Console.WriteLine("SubmitPrompt ex: " + ex.Message);
        }

    }
    private async void CreatePlaylist()
    {
        try
        {
            string result = await _jsRuntime.InvokeAsync<string>("spotifyGetTracks");
            _jsRuntime.InvokeVoidAsync("spotifyCreatePlaylistDisplay");

            List<string> listSpotifyTrackIds;
            listSpotifyTrackIds = JsonConvert.DeserializeObject<List<string>>(result);

            CreatePlaylist createPlaylist = new CreatePlaylist();

            SpotifyAppServices spotifyAppServices = new SpotifyAppServices(_config, _jsRuntime, _tokenService);

            if (listSpotifyTrackIds.Count == 0)
            {
                Console.WriteLine("CreatePlaylist: No tracks found to add to playlist");
                return;
            }

            string playlistId = await spotifyAppServices.SpotifyCreatePlaylist(PlaylistNameText);

            await spotifyAppServices.SpotifyAddTracksToPlaylist(listSpotifyTrackIds, playlistId);
            
            _jsRuntime.InvokeVoidAsync("spotifyResetGenerator");

            // Refresh the playlists list
            List<SpotifyPlaylist> listPlaylistItems = await spotifyAppServices.SpotifyGetPlaylists();
            SpotifyListPlaylists = listPlaylistItems;
            StateHasChanged();

            OpenPlaylist(playlistId, PlaylistNameText);
        }
        catch (Exception ex)
        {
            Console.WriteLine("CreatePlaylist ex: " + ex.Message);
        }
    }
}


